
* Initialization
#+begin_src emacs-lisp
  (require 'notmuch)

  (require 'org-notmuch)
#+end_src

* Remote notmuch
#+begin_src emacs-lisp
  (when (getenv "CS_PETRSU")
    (setq notmuch-command "remote-notmuch.sh"))
#+end_src

* Carbon copy
#+begin_src emacs-lisp
  ;; Don't write carbon copy localy when using Notmuch in the remote mode
  (if (getenv "CS_PETRSU")
      (progn
        (setq notmuch-fcc-dirs nil)
        (add-hook 'message-header-setup-hook
                  (lambda () (insert (format "Bcc: %s\n"
                                             (mail-fetch-field "From"))))))
    (setq notmuch-fcc-dirs
          '(("akolosov@cs.petrsu.ru" . "cs/sent-mail")
            ("akolosov@cs.karelia.ru" . "cs/sent-mail")
            ("alexander@kolosov.xyz" . "xyz/Sent"))))
#+end_src

* Settings
#+begin_src emacs-lisp
  (setq notmuch-mua-cite-function 'message-cite-original-without-signature)

  (setq notmuch-saved-searches
        '((:name "inbox" :query "tag:inbox" :key "i"  :count-query "tag:inbox AND tag:unread")
          (:name "inbox cs" :query "tag:cs and tag:inbox" :key "c")
          (:name "inbox xyz" :query "tag:xyz and tag:inbox" :key "x")
          (:name "researches" :query "tag:rsc" :key "R")
          (:name "flagged" :query "tag:flagged" :key "f")
          (:name "drafts" :query "tag:draft" :key "d")
          (:name "reports" :query "tag:report" :key "r" :count-query "tag:report AND tag:unread")
          (:name "subscriptions" :query "tag:subscription AND tag:unread" :key "s" :sort-order newest-first)
          (:name "unread" :query "tag:unread and not tag:report" :key "u")))

#+end_src

* Tag keybindings
#+begin_src emacs-lisp
  (define-key notmuch-show-mode-map "`" 'notmuch-show-apply-tag-macro)

  (define-key notmuch-search-mode-map "`" 'notmuch-search-apply-tag-macro)

  (setq notmuch-tag-macro-alist
        (list
         '("s" "+spam" "-inbox")
         '("j" "+junk" "-inbox")))

  (defun notmuch-show-apply-tag-macro (key)
    (interactive "k")
    (let ((macro (assoc key notmuch-tag-macro-alist)))
      (notmuch-show-tag (cdr macro))))

  (defun notmuch-search-tag-region (tags &optional beg end)
    (interactive (notmuch-search-interactive-region))
    (notmuch-search-tag tags beg end))
  
  (defun notmuch-search-apply-tag-macro (key)
    (interactive "k")
    (let ((macro (assoc key notmuch-tag-macro-alist)))
      (apply 'notmuch-search-tag (cdr macro) (notmuch-search-interactive-region))))

#+end_src
* Cryptography
   #+begin_src emacs-lisp
     ;; Sign output messages
     (add-hook 'message-setup-hook 'mml-secure-sign-pgpmime)

     ;; Verify signed mime messages
     (setq notmuch-crypto-process-mime t)
   #+end_src
* Sending mail

  Use `smtpmail` to send email via SMTP.
  
  #+begin_src emacs-lisp  
    (require 'smtpmail)

    (setq send-mail-function 'smtpmail-send-it)
    (setq message-send-mail-function 'smtpmail-send-it) ; if you use message/Gnus
  #+end_src

  Choose SMTP-server on the basis of =X-SMTP-Server= header, which is
  set on posting styles. In the absence of the header use default SMTP
  server.

  #+begin_src emacs-lisp
    (eval-after-load "smtpmail"
      '(progn
         (defadvice smtpmail-via-smtp (around set-smtp-server-from-header activate)
           (let ((smtpmail-smtp-server (or 
                                        (save-restriction
                                          (message-narrow-to-headers)
                                          (mail-fetch-field "X-SMTP-Server"))
                                        smtpmail-default-smtp-server))
                 (smtpmail-smtp-service (or 
                                         (save-restriction
                                           (message-narrow-to-headers)
                                           (mail-fetch-field "X-SMTP-Service"))
                                         25)))
             (message-remove-header "X-SMTP-Server")
             (message-remove-header "X-SMTP-Service")
             ad-do-it
             ))))
  #+end_src

  #+begin_src emacs-lisp
    (setq smtpmail-default-smtp-server "mail.cs.karelia.ru")
    (setq smtpservers-alist '(("@kolosov\\.xyz" . ("mail.kolosov.xyz" 587))
                              ("@cs\\.\\(petrsu\\|karelia\\)\\.ru" . ("mail.cs.karelia.ru" 25))))

    (add-hook 'message-header-setup-hook
              (lambda ()
                (let* ((from (mail-fetch-field "From"))
                       (mailserver-pair (assoc-default from smtpservers-alist 'string-match-p))
                       (server (car mailserver-pair))
                       (service (car (cdr mailserver-pair))))
                  (when mailserver-pair
                    (save-excursion
                      (insert (format "X-SMTP-Server: %s\n" server))
                      (insert (format "X-SMTP-Service: %d\n" service)))))))
  #+end_src
