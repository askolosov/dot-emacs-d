
* Initialization
#+begin_src emacs-lisp
  (require 'notmuch)

  (require 'org-notmuch)
#+end_src

* Remote notmuch
#+begin_src emacs-lisp
  (when (getenv "CS_PETRSU")
    (setq notmuch-command "remote-notmuch.sh"))
#+end_src

* Carbon copy
#+begin_src emacs-lisp
  ;; Don't write carbon copy localy when using Notmuch in the remote mode
  (if (getenv "CS_PETRSU")
      (progn
        (setq notmuch-fcc-dirs nil)
        (add-hook 'message-header-setup-hook
                  (lambda () (insert (format "Bcc: %s <%s>\n"
                                             (notmuch-user-name)
                                             "akolosov@cs.petrsu.ru")))))
    (setq notmuch-fcc-dirs
          '(("akolosov@cs.petrsu.ru" . "cs/sent-mail")
            ("akolosov@cs.karelia.ru" . "cs/sent-mail")
            ("alexander@kolosov.xyz" . "xyz/Sent"))))
#+end_src

* Settings
#+begin_src emacs-lisp
  (setq notmuch-mua-cite-function 'message-cite-original-without-signature)

  (setq notmuch-saved-searches
        '((:name "inbox" :query "tag:inbox" :key "i"  :count-query "tag:inbox AND tag:unread")
          (:name "inbox cs" :query "tag:cs and tag:inbox" :key "c")
          (:name "inbox xyz" :query "tag:xyz and tag:inbox" :key "x")
          (:name "researches" :query "tag:rsc" :key "R")
          (:name "flagged" :query "tag:flagged" :key "f")
          (:name "drafts" :query "tag:draft" :key "d")
          (:name "reports" :query "tag:report" :key "r" :count-query "tag:report AND tag:unread")
          (:name "subscriptions" :query "tag:subscription AND tag:unread" :key "s" :sort-order newest-first)
          (:name "unread" :query "tag:unread and not tag:report" :key "u")))

#+end_src

* Tag keybindings
#+begin_src emacs-lisp
  (define-key notmuch-show-mode-map "`" 'notmuch-show-apply-tag-macro)

  (define-key notmuch-search-mode-map "`" 'notmuch-search-apply-tag-macro)

  (setq notmuch-tag-macro-alist
        (list
         '("s" "+spam" "-inbox")
         '("j" "+junk" "-inbox")))

  (defun notmuch-show-apply-tag-macro (key)
    (interactive "k")
    (let ((macro (assoc key notmuch-tag-macro-alist)))
      (notmuch-show-tag (cdr macro))))

  (defun notmuch-search-tag-region (tags &optional beg end)
    (interactive (notmuch-search-interactive-region))
    (notmuch-search-tag tags beg end))
  
  (defun notmuch-search-apply-tag-macro (key)
    (interactive "k")
    (let ((macro (assoc key notmuch-tag-macro-alist)))
      (apply 'notmuch-search-tag (cdr macro) (notmuch-search-interactive-region))))

#+end_src
* Cryptography
   #+begin_src emacs-lisp
     ;; Sign output messages
     (add-hook 'message-setup-hook 'mml-secure-sign-pgpmime)

     ;; Verify signed mime messages
     (setq notmuch-crypto-process-mime t)
   #+end_src
* Sending mail
#+begin_src emacs-lisp
  (add-hook 'message-header-setup-hook
            (lambda ()
              (let ((from (mail-fetch-field "From")))
                (when (string-match-p "alexander@kolosov\\.xyz" from)
                  (save-excursion
                    (insert "X-SMTP-Server: mail.kolosov.xyz\n")
                    (insert "X-SMTP-Service: 587\n"))))))
#+end_src
