#+TITLE: Alexander Kolosov's Org-mode configuration
#+OPTIONS: toc:nil num:nil ^:nil

Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also *implemented using* Org-mode and [[http://git-scm.com/][git]].

* Org-Mode Hook -- Keybindings
   :PROPERTIES:
   :CUSTOM_ID: keybindings
   :END:
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)))
#+end_src

* Speed keys
   :PROPERTIES:
   :CUSTOM_ID: speed-keys
   :END:
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the `=org-speed-commands-default=' variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp
  (setq org-use-speed-commands t)
#+end_src

* Code blocks
   :PROPERTIES:
   :CUSTOM_ID: babel
   :END:
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.
#+begin_src emacs-lisp :tangle no
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sh . t)))
#+end_src

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+begin_src emacs-lisp :tangle no
  (setq org-confirm-babel-evaluate nil)
#+end_src

* Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+end_src

* The Library of Babel
   :PROPERTIES:
   :CUSTOM_ID: library-of-babel
   :END:
The library of babel contains makes many useful functions available
for use by code blocks in *any* emacs file.  See the actual
=library-of-babel.org= (located in the Org-mode =contrib/babel=
directory) file for information on the functions, and see
[[http://orgmode.org/worg/org-contrib/babel/intro.php#library-of-babel][worg:library-of-babel]] for more usage information.

Code blocks can be loaded into the library of babel from any Org-mode
file using the `org-babel-lob-ingest' function.
* Open PDFs using evince
  #+begin_src emacs-lisp
    (eval-after-load "org"
      '(progn
         ;; Change .pdf association directly within the alist
         (setcdr (assoc "\\.pdf\\'" org-file-apps) "evince %s")))
  #+end_src
* Using bibtex exporter
  #+begin_src emacs-lisp
    (require 'ox-bibtex)
  #+end_src
* Time tracking
  Set default timer
  #+begin_src emacs-lisp
    (setq org-timer-default-timer 25)
  #+end_src

  When I clock-in a task, the timer starts with the default unless a timer is already underway:
  #+begin_src emacs-lisp
    (add-hook 'org-clock-in-hook' (lambda () 
                                    (org-timer-set-timer '(16))))
  #+end_src

* Clean view
  #+begin_src emacs-lisp
    (setq org-hide-leading-stars t)
  #+end_src
* Cookies
#+begin_src emacs-lisp 
(setq org-log-done t)
#+end_src

* Clojure in org-babel
This hack is used to run Clojure code in nrepl instead of swank.
#+begin_src emacs-lisp
(eval-after-load "ob-clojure"
  '(defun org-babel-execute:clojure (body params)
     "Execute a block of Clojure code with Babel and nREPL."
     (require 'nrepl)
     (if (nrepl-current-connection-buffer)
         (let ((result (nrepl-eval (org-babel-expand-body:clojure body params))))
           (car (read-from-string (plist-get result :value))))
       (error "nREPL not connected!"))))
#+end_src

Switch on Org-babel Clojure support.
#+begin_src emacs-lisp
  (require 'ob-clojure)
#+end_src

* Org-Jira 
  To use this feature install =org-jira= to =src= and 
  uncomment following lines
#+begin_src emacs-lisp
;  (setq jiralib-url "http://jira.zerobugs.co")
;  (require 'org-jira)
#+end_src

* Latex export
#+begin_src emacs-lisp
  (setq org-latex-default-packages-alist
        '(("utf8x" "inputenc" t)
          ("T1,T2A" "fontenc" t)
          ("" "amsmath" nil)
          ("" "amsthm" nil)
          ("" "fixltx2e" nil)
          ("" "graphicx" t)
          ("" "longtable" nil)
          ("" "float" nil)
          ("" "wrapfig" nil)
          ("normalem" "ulem" t)
          ("" "textcomp" t)
          ("" "marvosym" t)
          ("" "wasysym" t)
          ("" "amssymb" t)
          ("" "amstext" nil)
          ("" "hyperref" nil)
          "\\tolerance=1000"))
        
  (setq org-latex-pdf-process
        '("latexmk -f -pdf %f"))
#+end_src
* List of my Agenda org-files
#+begin_src emacs-lisp 
  (setq org-agenda-files (list "~/org/cs.org"
                               "~/org/teaching.org"
                               "~/org/nest.org"
                               ;; "~/org/moonlighting.org"
                               "~/org/memos.org"
                               "~/org/researches.org"
                               "~/org/home.org"))

#+end_src
   
