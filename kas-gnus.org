#+TITLE: Alexander Kolosov's Gnus mail reader settings
#+OPTIONS: toc:nil num:nil ^:nil

* Group parameters
    #+begin_src emacs-lisp
      (setq gnus-parameters
            '(("^\\(nnrss:\\|nntp\\+gwene:\\)"
               (gnus-show-threads nil)
               (mm-discouraged-alternatives nil)
               (gnus-summary-line-format (concat "%U%R %* "
                                                 "%~(max-right 95)~(pad-right 95)s %-105=%&user-date;\n")))))
    #+end_src
   
* BBDB
    :PROPERTIES:
    :CUSTOM_ID: bbdb
    :END:
[[http://bbdb.sourceforge.net/][# BBDB]] -- _The Insidious Big Brother Database_ is Emacs' contact manager
which is very useful for keeping all of your contacts organized for
use with gnus.

#+begin_src emacs-lisp
  (require 'bbdb)
  (require 'bbdb-autoloads)
  
  ;; (setq load-path (cons "~/.emacs.d/bbdb/lisp" load-path))
  ;; (require 'bbdb)
  ;; (bbdb-initialize)
  ;; (setq bbdb-north-american-phone-numbers nil)
  ;; (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
  
  (setq
   bbdb-file "~/.bbdb"
   bbdb-offer-save 'auto
   bbdb-notice-auto-save-file t
   bbdb-expand-mail-aliases t
   bbdb-canonicalize-redundant-nets-p t
   bbdb-always-add-addresses t
   bbdb-complete-name-allow-cycling t
   bbdb-use-pop-up nil
   bbdb-pop-up-target-lines 2
   bbdb-send-mail-style 'message)   
#+end_src

** Using local LDAP for email address autocompletion (when we are in CS dept.)
*** LDAP access parametersa
    #+begin_src emacs-lisp
      (setq ldap-host-parameters-alist '(("ldap.cs.prv" 
                                          base "dc=cs,dc=karelia,dc=ru")))

      (setq ldap-ldapsearch-args (quote ("-tt" "-LLL" "-x" "-Z")))
    #+end_src

*** EUDC configuration for LDAP+BBDB

     #+begin_src emacs-lisp
       (require 'eudc)

       (setq eudc-default-return-attributes nil
             eudc-strict-return-matches nil)

       (eudc-set-server "localhost" 'bbdb t)
       (setq eudc-server-hotlist '(("localhost" . bbdb)))
       (if (getenv "CS_PETRSU")
           (add-to-list 'eudc-server-hotlist
                        '("ldap.cs.prv" . ldap)))

       (setq eudc-inline-expansion-servers 'hotlist)

       (eudc-protocol-set 'eudc-inline-expansion-format '("%s <%s@cs.petrsu.ru>" gecos uid)
                          'ldap)

       (eudc-protocol-set 'eudc-inline-query-format '((uid)
                                                      (sn))
                          'ldap)


       (eudc-protocol-set 'eudc-inline-expansion-format '("%s %s <%s>" firstname lastname net)
                          'bbdb)

       (eudc-protocol-set 'eudc-inline-query-format '((name)
                                                      (firstname)
                                                      (lastname)
                                                      (firstname lastname)
                                                      (net))
                          'bbdb)
     #+end_src

* Summary View
   - Setup convinient summary format.
   #+begin_src emacs-lisp
     (setq gnus-summary-line-format
           (concat "%U%R %~(pad-right 2)t%* %~(pad-right 2)B%(%[%-20,20f%]%) "
                   "%~(max-right 90)~(pad-right 90)s %-110=%&user-date;, %k \n"))
     
     (setq gnus-user-date-format-alist
           '(((gnus-seconds-today) . "Сёгодня %H:%M")
             ((+ 86400 (gnus-seconds-today)) . "Вчера %H:%M")
             (604800 . "%a %H:%M") ;;that's one week
     ;;        ((gnus-seconds-month) . "%d.%m")
             ((gnus-seconds-year) . "%d %b")
             (t . "%d.%m.%Y"))) ;;this one is used when no other does match
     
   #+end_src

#    - Hide all threads when group is just opened.
#    #+begin_src emacs-lisp
#      (add-hook 'gnus-summary-mode-hook 'gnus-summary-hide-all-threads)
#    #+end_src

   - Thread sorting method.
   #+begin_src emacs-lisp
     (setq gnus-thread-sort-functions
           '((not gnus-thread-sort-by-date)
             gnus-thread-sort-by-total-score))     
   #+end_src

   - Highlight current cursor line position in the Gnus summary.
   #+begin_src emacs-lisp
     (add-hook 'gnus-summary-mode-hook 'hl-line-mode)
   #+end_src

* Attachments
   - Set default directory for saving attachments
 
    #+begin_src emacs-lisp
      (setq mm-default-directory "~/attachments/")
    #+end_src

   - Don't show html or richtext formatted attachments if plaintext
     part exists

     #+begin_src emacs-lisp
       (eval-after-load "mm-decode"
         '(progn 
            (add-to-list 'mm-discouraged-alternatives "text/html")
            (add-to-list 'mm-discouraged-alternatives "text/richtext")))
     #+end_src

* Cryptography
   #+begin_src emacs-lisp
     ;; verify/decrypt only if mml knows about the protocol used
     (setq mm-verify-option 'known)
     (setq mm-decrypt-option 'known)
     
     (setq gnus-treat-x-pgp-sig t)
     
     ;; Tell Gnus not to wait for a request, just display the thing
     ;; straight away.
     (eval-after-load "mm-decode"
       '(add-to-list 'mm-automatic-display "application/pgp$"))
     
     ;; Sign output messages
     (add-hook 'gnus-message-setup-hook 'mml-secure-sign-pgpmime)
     
     ;; only encrypt
     ;;(add-hook 'gnus-message-setup-hook 
     ;;          (lambda ()
     ;;            (mml-secure-message-encrypt-pgpmime 1)))
     
     
     ;; Passphrase cache timeout
     (setq mml2015-cache-passphrase t
           mml2015-passphrase-cache-expiry '28800)
     
     ;; Workaroud for some cryptography problems
     ;; (add-to-list 'mm-body-charset-encoding-alist '(utf-8 . quoted-printable))
   #+end_src
# ** Spam package
#    #+begin_src emacs-lisp
#      (require 'spam)
#      (spam-initialize)
     
#      ;; Here I define general anti-spam things
#      ;; it only say that on exiting all groups matching nnml:private.*,
#      ;; we launch the spam processor and ham processor (using bogofilter)
#      (setq spam-junk-mailgroups '("Junk")
#            spam-split-group "Junk")
     
#      (setq nnmail-split-fancy
#            '(|
#              (: spam-split)))
#    #+end_src
   
* Autocheck using Gnus demon
   #+begin_src emacs-lisp
     (defun gnus-autocheck()
       (gnus-demon-add-handler 'gnus-demon-scan-news 15 nil))
     
     (add-hook 'gnus-started-hook 'gnus-autocheck)
   #+end_src

* New mail notification
   #+begin_src emacs-lisp
     (defun x-urgency-hint (frame set &optional source)
       "Set urgency hint for `frame' to `set' for `source'."
       (let* ((wm-hints (append (x-window-property
                                 "WM_HINTS" frame "WM_HINTS"
                                 (if source
                                     source
                                   (string-to-number
                                    (frame-parameter frame 'outer-window-id)))
                                 nil t)
                                nil))
              (flags (car wm-hints)))
         (setcar wm-hints
                 (if set
                     (logior flags #x00000100)
                   (logand flags #xFFFFFEFF)))
         (x-change-window-property "WM_HINTS" wm-hints frame "WM_HINTS" 32 t)))
     
     (require 'gnus-notifications)
     (defvar cofi--gnus-frame nil)
     (add-hook 'gnus-started-hook (lambda () (setq cofi--gnus-frame (selected-frame))))
     (defun cofi/set-mail-urgency ()
       "Set urgency hint for frame most recently showing gnus."
       (loop for (group . rest) in gnus-newsrc-alist
             when (and (<= (gnus-group-level group) gnus-notifications-minimum-level)
                       (let ((unread (gnus-group-unread group)))
                         (and (numberp unread)
                              (> unread 0))))
     
             do (prog1
                    (x-urgency-hint (if (frame-live-p cofi--gnus-frame)
                                        cofi--gnus-frame
                                      (setq cofi--gnus-frame nil)
                                      (selected-frame))
                                    t)
                  (return))))
     
     (add-hook 'gnus-started-hook #'cofi/set-mail-urgency)
     (add-hook 'gnus-after-getting-new-news-hook #'cofi/set-mail-urgency)
   #+end_src
* Sending mail

  Use `smtpmail` to send email via SMTP.
  
  #+begin_src emacs-lisp  
    (require 'smtpmail)

    (setq send-mail-function 'smtpmail-send-it)
    (setq message-send-mail-function 'smtpmail-send-it) ; if you use message/Gnus
  #+end_src

  Choose SMTP-server on the basis of =X-SMTP-Server= header, which is
  set on posting styles. In the absence of the header use default SMTP
  server.

  #+begin_src emacs-lisp
    (eval-after-load "smtpmail"
      '(progn
         (defadvice smtpmail-via-smtp (around set-smtp-server-from-header activate)
           (let ((smtpmail-smtp-server (or 
                                        (save-restriction
                                          (message-narrow-to-headers)
                                          (mail-fetch-field "X-SMTP-Server"))
                                        smtpmail-default-smtp-server))
                 (smtpmail-smtp-service (or 
                                         (save-restriction
                                           (message-narrow-to-headers)
                                           (mail-fetch-field "X-SMTP-Service"))
                                         25)))
             (message-remove-header "X-SMTP-Server")
             (message-remove-header "X-SMTP-Service")
             ad-do-it
             ))))
  #+end_src
  
* Topic grouping of groups
  - Enable topic mode
  #+begin_src emacs-lisp  
    (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
  #+end_src

  - Hide all empty topics
  #+begin_src emacs-lisp  
    (setq gnus-topic-display-empty-topics nil)
  #+end_src

  
* User specific mail settings (mailboxes, SMTP-servers, signatures, etc.)
  #+begin_src emacs-lisp
    (starter-kit-load "kas-mailboxes.org")
  #+end_src

